type PersonInfo {
    id: Int!,
    name: String!
    flag: Int,
    passwd: String!,
    created: DateTime,
    updated: DateTime
}

type PersonInfoResult {
    header: Header!,
    body: [PersonInfo]
}

type PersonToken {
    name: String!,
    flag: Int,
    token: String!
}

type PersonTokenResult {
    header: Header!,
    body: PersonToken
}

type PersonStockData {
    id: Int! # personId
    stockId: Int!
    total: Int!,
    price: Float!,
    updated: DateTime
}

type PersonStockDataResult {
    header: Header!,
    body: [PersonStockData]
}

type PersonStockLog {
    logId: Int,
    id: Int!
    stockId: Int!
    action: Int! # 0: buy, 1: sell, 2, share
    total: Int!,
    price: Float!,
    created: DateTime
}

type PersonStockLogResult {
    header: Header!,
    body: [PersonStockLog]    
}

type PersonFundData {
    id: Int!
    base: Float!,
    valid: Float!
    updated: DateTime
}

type PersonFundDataResult {
    header: Header!,
    body: PersonFundData    
}

type PersonQuery {
    # one(id: Int!): PersonInfo
    token(name: String!, passwd: String!): PersonTokenResult! #PersonToken
    all: PersonInfoResult!
    stockData(stockId: Int): PersonStockDataResult!
    stockLogs(stockId: Int, begin: Date, end: Date): PersonStockLogResult!
    fundData: PersonFundDataResult!
}

type PersonMutation {
    add(name: String!, passwd: String!): Result!
    refreshToken(token: String!): PersonTokenResult!
    removeToken: Result!
    updateStockData(stockId: Int!, action: Int!, total: Int!, price: Float!): Result! # return stock total
    removeStockData(stockId: Int!): Result!
    updateFundData(base: Float!, valid: Float): Result!
}

type Query {
    Person: PersonQuery
}

type Mutation {
    Person: PersonMutation
}