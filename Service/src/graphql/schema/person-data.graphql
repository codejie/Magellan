type PersonInfo {
    id: Int!,
    name: String!
    flag: Int,
    passwd: String!,
    created: DateTime,
    updated: DateTime
}

# type PersonToken {
#     header: Header!,
#     name: String!,
#     flag: Int,
#     token: String!
# }
type Result {
    header: Header!,
    body: Body
}

type PersonStockData {
    id: Int! # personId
    stockId: Int!
    total: Int!,
    price: Float!,
    updated: DateTime
}

type PersonStockLog {
    logId: Int,
    id: Int!
    stockId: Int!
    action: Int! # 0: buy, 1: sell, 2, share
    total: Int!,
    price: Float!,
    created: DateTime
}

type PersonFundData {
    id: Int!
    base: Float!,
    valid: Float!
    updated: DateTime
}

type PersonQuery {
    one(id: Int!): PersonInfo
    fetchToken(name: String!, passwd: String!): Result #PersonToken
    all: [PersonInfo]
    stockData(stockId: Int): [PersonStockData]
    stockLogs(id: Int!, stockId: Int, begin: Date, end: Date): [PersonStockLog]
    fundData(id: Int!): PersonFundData
}

type PersonMutation {
    add(name: String!, passwd: String!): Int!
    removeToken: Boolean
    updateStockData(id: Int!, stockId: Int!, action: Int!, total: Int!, price: Float!): Int! # return stock total
    removeStockData(id: Int!, stockId: Int!): Int!
    updateFundData(id: Int!, base: Float!, valid: Float): Int!
}

type Query {
    Person: PersonQuery
}

type Mutation {
    Person: PersonMutation
}